[
  
  {
    "title": "AOP를 이용한 Logging 이용하기",
    "url": "/posts/AOP-Logging/",
    "categories": "spring",
    "tags": "spring, aop",
    "date": "2024-03-28 00:00:00 +0900",
    





    
    "snippet": "​AOP란​  스프링 AOP (Aspect Oriented Programming) 이란 관점 지향 프로그래밍이라고 부른다. 어떤 로직을 기준으로 핵심적인 관점, 부가적인 관점으로 나누어서 보고 그 관점을 기준으로 각각 모듈화하겠다는 것이다. 여기서 모듈화란 어떤 공통된 로직이나 기능을 하나의 단위로 묶는 것을 말한다. ​    AOP 주요 개념    ...",
    "content": "​AOP란​  스프링 AOP (Aspect Oriented Programming) 이란 관점 지향 프로그래밍이라고 부른다. 어떤 로직을 기준으로 핵심적인 관점, 부가적인 관점으로 나누어서 보고 그 관점을 기준으로 각각 모듈화하겠다는 것이다. 여기서 모듈화란 어떤 공통된 로직이나 기능을 하나의 단위로 묶는 것을 말한다. ​    AOP 주요 개념    Aspect : 위에서 설명한 흩어진 관심사를 모듈화 한 것. 주로 부가기능을 모듈화함  Target : Aspect 를 적용하는 곳 (클래스, 메서드 등)  Advice : 실질적으로 어떤 일을 해야할 지에 대한 것, 실질적인 부가기능을 담은 구현체  JointPoint : Advice가 적용될 위치, 끼어들 수 있는 지점, 메서드 진입 지점, 생성자 호출 시점, 필드에서 값을 꺼내올 때 등 다양한 시점에 적용가능  PointCut : JointPoint의 상세한 스펙을 정의한 것. ‘A란 메서드의 진입 시점에 호출할 것’과 같이 구체적으로 Advice가 실행될 지점을 정할 수 있음스프링 AOP 특징  스프링 빈에만 AOP를 적용 가능  스프링 IoC와 연동하여 엔터프라이느 애플리케이션에서 가장 흔한 문제인 중복코드, 프록시 클래스 작성의 번거로움 등에 대한 해결책을 지원하는 것이 목적플러그인    // AOP\timplementation 'org.springframework.boot:spring-boot-starter-aop'build.gradle 파일에 AOP 플러그인을 추가한다.LogConfig 파일 추가@Slf4j@Component@Aspectpublic class LogConfig {    // com.aop.controller 이하 패키지의 모든 클래스 이하 모든 메서드에 적용    @Pointcut(\"execution(* com.study.signin.api.controller..*.*(..))\")    private void cut(){}    // Pointcut 에 의해 필터링된 경로로 들어오는 경우 메서드 호출 전에 적용    @Before(\"cut()\")    public void beforeParameterLog(JoinPoint joinPoint) {        // 메서드 정보 받아오기        Method method = getMethod(joinPoint);        log.info(\"======= method name = {} =======\", method.getName());        // 파라미터 받아오기        Object[] args = joinPoint.getArgs();        if (args.length &lt;= 0) log.info(\"no parameter\");        for (Object arg : args) {            log.info(\"parameter type = {}\", arg.getClass().getSimpleName());            log.info(\"parameter value = {}\", arg);        }    }    // Poincut에 의해 필터링된 경로로 들어오는 경우 메서드 리턴 후에 적용    @AfterReturning(value = \"cut()\", returning = \"returnObj\")    public void afterReturnLog(JoinPoint joinPoint, Object returnObj) {        // 메서드 정보 받아오기        Method method = getMethod(joinPoint);        log.info(\"======= method name = {} =======\", method.getName());        log.info(\"return type = {}\", returnObj.getClass().getSimpleName());        log.info(\"return value = {}\", returnObj);    }    // JoinPoint 로 메서드 정보 가져오기    private Method getMethod(JoinPoint joinPoint) {        MethodSignature signature = (MethodSignature) joinPoint.getSignature();        return signature.getMethod();    }}위의 코드를 추가하면 controller를 호출했을 때 로그가 발생되는 것을 확인할 수 있다."
  },
  
  {
    "title": "JPA 사용시 생기는 N+1 문제",
    "url": "/posts/JPA-N+1/",
    "categories": "spring",
    "tags": "spring, jpa",
    "date": "2024-03-22 04:00:00 +0900",
    





    
    "snippet": "​JPA N+1 문제란​  N + 1 문제란 1번의 쿼리를 날렸을 떄 의도하지 않은 N번의 쿼리가 추가적으로 실행되는 것을 의미한다.​    어떤 상황에 발생되는가?    JPA Fetch 전략이 EAGER 전략으로 데이터를 조회하는 경우  JPA Fetch 전략이 LAZY 전략으로 데이터를 가져온 이후에 연관 관계인 하위 엔티티를 다시 조회하는 경우...",
    "content": "​JPA N+1 문제란​  N + 1 문제란 1번의 쿼리를 날렸을 떄 의도하지 않은 N번의 쿼리가 추가적으로 실행되는 것을 의미한다.​    어떤 상황에 발생되는가?    JPA Fetch 전략이 EAGER 전략으로 데이터를 조회하는 경우  JPA Fetch 전략이 LAZY 전략으로 데이터를 가져온 이후에 연관 관계인 하위 엔티티를 다시 조회하는 경우왜 발생하는가?  JPA Repository 로 find 시 실행하는 첫 쿼리에서 하위 엔티티까지 한번에 가져오지 않고, 하위 텐티티를 사용할 때 추가로 조회하기 때문이다.​[JPA N+1 문제 대한 프로젝트] (https://github.com/devforest1/n_plus)N+1 문제 해결 방법1. Fetch Join (패치 조인)  N+1 자체가 발생하는 이유는 한쪽 테이블만 조회하고 연결된 다른 테이블은 따로 조회하기 때문이다. 미리 두 테이블을 JOIN 하여 한 번에 데이터를 가져올 수 있다면 애초에 N+1 문제가 발생하지 않는다.[Repository 선언]    @Query(\"select DISTINCT o from Owner o join fetch o.pets\")    List&lt;Owner&gt; findAllJoinFetch();    @Test    void test() {        ...        System.out.println(\"----------------------\")        List&lt;Owner&gt; owerList = ownerRepository.findAllJoinFetch();    }Fetch Join (패치조인)의 단점  쿼리 한번에 모든 데이터를 가져오기 떄문에 JPA가 제공하는 Paging API 사용 불가능  1:N 관계가 두 개 이상인 경우 사용 불가  패치 조인 대상에게 별칭(as) 부여 불가능@Entity Graph  @EntityGraph 의 attributePaths 는 같이 조회할 연관 엔티티명을 적으면 된다. ,(콤마)를 통해 여러 개를 줄 수도 있다.[Repository 선언]    @EntityGraph(attributePaths = {\"pets\"})    @Query(\"select DISTINCT o from Owner o\")    List&lt;Owner&gt; findAllEntityGraph();    @Test    void test() {        ...        System.out.println(\"----------------------\")        List&lt;Owner&gt; owerList = ownerRepository.findAllEntityGraph();    }Fetch Join과 EntityGraph 사용시 주의할 점  공통적으로 카테시안 곱(Cartesian Product)이 발생하여 중복이 생길 수 있다. JPQL에 DISTINCT 를 추가하여 중복을 제거하거나 OneToMany 필드 타입에 Set으로 선언하여 중복 제거하는 방법이 있다."
  },
  
  {
    "title": "Spring MVC 패턴",
    "url": "/posts/%EC%8A%A4%ED%94%84%EB%A7%81-MVC/",
    "categories": "spring",
    "tags": "spring, framework",
    "date": "2024-03-20 17:24:00 +0900",
    





    
    "snippet": "​Spring이란​  Java의 웹 프레임워크로 Java 언어 기반으로 웹 애플리케이션을 만들기 위한 프로그래밍 툴이다.  프로젝트를 진행하다보면 분업을 해도 중복된 코드가 존재한다. Spring은 이런 중복코드의 사용률을 줄여주고, 비즈니스 로직을 더 간단하게 해준다.​    Spring의 주요 특징    ​          IoC (Inversio...",
    "content": "​Spring이란​  Java의 웹 프레임워크로 Java 언어 기반으로 웹 애플리케이션을 만들기 위한 프로그래밍 툴이다.  프로젝트를 진행하다보면 분업을 해도 중복된 코드가 존재한다. Spring은 이런 중복코드의 사용률을 줄여주고, 비즈니스 로직을 더 간단하게 해준다.​    Spring의 주요 특징    ​          IoC (Inversion of Control, 제어의 반전)      DI (Dependency Injection, 의존성 주입)      AOP (Aspect Object Programming, 관점 지향 프로그래밍)      POJO (Plain Old Java Object) 방식​—​        Spring MVC란        ​보통은 MVC 패턴이라고 말한다. MVC란 Model-View-Controller 의 단어를 줄인 말이다.​                  MVC(Model-View-Controller)는 사용자 인터페이스, 데이터 및 논리 제어를 구현하는 데 널리 사용하는 소프트웨어 디자인 패턴이다. 소프트웨어의 비즈니스 로직과 화면을 구분하는데 중점을 두고 있으며, 이러한 관심사 분리는 더나은 업무의 분리와 향상된 관리를 제공한다.​                      디자인 패턴 : 기존 환경 내에서 반복적으로 일어나는 문제들을 어떻게 풀어나갈 것인가에 대한 솔루션 같은 것이다.​  비즈니스 로직 : 사용자의 요구사항을 해결하기 위한 실질적인 코드다. 실제적인 기능을 수행하는 코드를 말한다.​​    MVC 패턴 동작 순서  ​  클라이언트가 서버에 요청을 한다.​  클라이언트가 요청한 URL을 확인후 URL이 있는 Controller의 메소드로 이동한다.​  Controller는 해당 요청에 필요한 작업을 Service 에 위임한다.​  Service 는 요청한 필요한 작업을 수행하고, 요청에 대해 DB에 접근해야 한다면 DAO를 요청하여 처리를 위임한다.​  DAO는 DB 정보를 DTO를 통해 받아 서비스에게 전달한다.​  Service는 전달받은 데이터를 Controller에 전달한다.​  Controller 는 Model 객체에게 요청에 맞는 View 정보를 담아 클라이언트에게 Rending 된 화면을 보여주고 요청을 마친다.​추가  클라이언트가 요청한 URL을 해당하는 Controller로 찾아주는 걸 DispatcherServlet을 통해 찾는다.  Service는 비즈니스 로직을 실제로 구현한다.  DAO란 Data Access Object로 DB의 데이터에 접근하기 위한 객체를 가리킨다.  DTO란 Data Transfer Object로 컨트롤러, 뷰, 비즈니스 로직 계층 간의 데이터 교환을 위한 Java Bean을 의미한다.​​Model​  Model은 Data와 애플리케이션이 무엇을 할 것인지 정의하는 부분이다.  컨트롤러가 호출을 하면 DB와 연동하여 사용자의 입출력 데이터를 다루는 일과 같은 데이터와 연관된 비즈니스 로직을 처리하는 역할을 한다.​    View    View는 사용자에게 보여주는 화면(UI)에 해당한다.  사용자의 상호작용을 하면 컨트롤러부터 모델의 결과값을 사용자에게 화면으로 보여준다.​    Controller    Controller는 Model과 View 사이를 이어주는 역할을 한다.  Model이 데이터를 어떻게 처리할지 알려주는 역할을 한다."
  }
  
]

